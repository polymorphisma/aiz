from typing import TypedDict, Annotated, Sequence, List, Optional
from langchain_core.messages import BaseMessage
import operator

class GlobalAgentState(TypedDict):
    """
    Represents the shared state of the AIZ agentic workflow. It's the
    central memory and scratchpad for the entire multi-agent operation.
    """
    
    # Core conversation history. Appended to with each step.
    messages: Annotated[Sequence[BaseMessage], operator.add]
    
    # The user's initial, unmodified query.
    user_query: str
    
    # The name of the CLI tool the user wants to use (e.g., "git", "docker").
    # A router or the supervisor might populate this.
    target_cli_tool: Optional[str]
    
    # The content of the --help documentation scraped by the CommandHelpTool.
    help_text_content: Optional[str]
    
    # The final command generated by the specialist agent.
    generated_command: Optional[str]

    # The result after executing a command with the CommandExecutorTool.
    command_output: Optional[str]

    # A field for the supervisor to break down a complex task into a plan.
    plan: Optional[List[str]]
